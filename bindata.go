// Code generated by go-bindata.
// sources:
// assets/map.html
// DO NOT EDIT!

package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"strings"
	"os"
	"time"
	"io/ioutil"
	"path/filepath"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name string
	size int64
	mode os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _assetsMapHtml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xdc\x58\x5b\x73\xdb\xba\x11\x7e\xcf\xaf\xd8\xd0\xe9\x90\xac\x25\x92\x72\x2e\x8d\xa9\xcb\x69\x6a\x67\x72\xd2\xb1\x8f\x3d\xe3\x9c\xc9\x74\x3a\x9d\x0c\x44\x82\x22\x1c\x92\x60\x41\x50\x97\x78\xf4\xdf\xbb\x00\x29\x09\xa2\x24\xa7\x7d\xe9\xc3\x79\x48\x0c\xee\x2e\xbe\xfd\xb0\x58\xec\x02\x1a\xbd\xbc\xbe\xbb\xfa\xf2\x8f\xfb\x8f\x90\xca\x3c\x83\xfb\xdf\xff\x76\xf3\xf9\x0a\xac\xbe\xef\x7f\x7d\x7d\xe5\xfb\xd7\x5f\xae\xe1\xd7\x2f\xb7\x37\xf0\xc6\x0b\x06\xbe\xff\xf1\x37\x6b\xf2\x62\xa4\x2c\x27\x2f\x00\x46\x29\x25\xb1\x1a\xe0\x50\x32\x99\xd1\xc9\xed\x0a\x6e\x78\x44\x24\xe3\xc5\xc8\x6f\x44\x8d\x3a\xa7\x92\x40\x41\x72\x3a\xb6\xe6\x8c\x2e\x4a\x2e\xa4\x05\x11\x2f\x24\x2d\xe4\xd8\x5a\xb0\x58\xa6\xe3\x98\xce\x59\x44\xfb\xfa\xa3\x07\xac\x60\x92\x91\xac\x5f\x45\x24\xa3\xe3\x41\x0f\x72\xb2\x64\x79\x9d\x6f\x04\x16\xf8\x2d\x76\x25\x57\x19\x05\xb9\x2a\x11\x5c\xd2\xa5\xf4\xa3\xaa\xb2\x20\xa7\x31\x23\x63\xab\x8a\x04\xa5\x85\xd5\x98\x02\xfc\x95\xe5\xca\x37\xd4\x22\x73\x52\x29\xcb\x2a\xf4\xfd\x04\x69\x54\xde\x8c\xf3\x59\x46\x49\xc9\x2a\x2f\xe2\xb9\xc2\xf8\x25\x21\x39\xcb\x56\xe3\x6b\xc1\x59\x7c\xfe\x40\x8a\x2a\x14\x74\x56\x67\x44\xf4\xa6\x3c\x8b\xdd\x61\x8b\x39\xe5\xf1\xaa\xa7\x62\xd2\x3b\xcb\x49\x19\xb3\xf9\x93\x5e\x42\x38\x08\x82\x3f\x0d\x53\xca\x66\xa9\x6c\xc6\x25\x89\x63\x56\xcc\xc2\x60\x98\x13\x31\x63\x05\x0e\x94\xef\x7e\xe3\x27\xb4\xb5\x23\x50\x8e\xec\x46\x51\xb1\x1f\x34\x1c\x5c\x94\xcb\xe1\xba\xf5\xe5\xf1\xec\x0a\x35\x82\x67\x1f\xa4\x14\x6c\x5a\xab\x50\x3f\x4d\xb9\x94\x3c\x0f\x5f\x97\x4b\x78\xd9\x2c\x90\x14\x72\x38\x25\xd1\xf7\x99\xe0\x75\x11\x87\x67\x49\x92\x0c\x79\x49\x22\x26\x57\x61\xe0\xbd\x7f\xbb\xe5\xa2\xc0\xb5\xaf\x45\x43\x54\xad\x6c\xeb\xed\x2c\x23\x95\xac\xcb\x98\x48\x1a\x3f\x41\xc9\x2b\xa6\xdc\x85\x64\x5a\xf1\xac\x96\x74\x08\x19\x4d\xa4\x72\x3b\x04\xc9\xcb\x66\xd0\xf5\x0a\x1b\x4f\x83\x40\xa9\x77\x24\x2e\x87\xf0\xa3\xcf\x8a\x98\x2e\xc3\xcb\x4b\xfc\x98\x72\x11\x53\xd1\x17\x24\x66\x75\xd5\x5a\xb7\xc2\x70\x80\x2b\x43\x9f\x18\x9d\xb3\xd6\x76\xd9\xaf\x52\x12\xf3\x45\xa8\x25\x80\xd6\xfa\x5f\x33\xed\xd9\x68\x01\x79\x8a\x78\xc6\x45\x78\x16\x04\x97\x66\xbc\x40\x25\x4f\x3f\xa6\x11\x17\x3a\x83\xc3\x82\x17\xb4\x8d\xc5\xc8\xd7\x59\xb6\xc9\xb8\x48\xb0\x52\x42\x25\xa2\xb1\xb5\xc9\x22\xf2\x48\x96\xdd\x24\x52\x32\x3f\x63\xd3\xca\x7f\xfc\x77\x4d\xc5\xca\x1f\x78\xef\xda\xa1\x97\xb3\xc2\x7b\xac\xac\x09\x22\x6b\xb4\x13\xd0\x88\xbc\x58\x2c\x3c\x5e\xd2\x22\x23\x2b\x2a\x2a\x8f\x8b\x99\x8f\x1e\xfc\x3b\x14\xdd\x34\xa2\xd3\x38\xc6\xa9\x78\x24\x73\xd2\x48\xf1\xe4\xa5\x44\x54\x14\x4f\x5e\x2d\x93\xfe\xfb\xed\xe9\x88\x6a\x21\xf0\x40\x66\xed\x11\x86\x31\x14\x75\x96\x6d\xf2\x9c\x45\x07\x22\xcc\xe3\xef\x48\xa0\x23\xfd\xc1\x79\x8e\xa2\xc1\xf0\x45\x2b\x78\xe5\x24\x75\x11\x29\x48\xc7\x7d\x6a\x65\x6a\x72\xa9\x26\xd2\x05\x18\x4b\xb9\x25\xa5\x63\x35\xc7\xc8\xea\xc1\xce\x18\x74\xb5\xc0\x9d\xac\x42\xf8\xa7\x21\x85\x2e\x40\xbb\xe1\xde\x07\x31\xbb\x57\x8b\x14\x8e\xdb\xfb\xaf\xec\x77\x19\xe2\xb8\xc6\x84\x7f\x6d\xc7\xeb\xed\x89\xd7\xdc\x3d\xcc\x6b\x8d\xe1\x74\x10\xf5\x1f\xef\xee\xe1\xd6\x71\xdd\x6d\x08\x00\xe6\x44\x40\xc6\xd1\x48\x1e\xae\xfa\x46\xcb\x1d\x08\xbc\xa0\xa7\xfe\x03\x77\x8f\x32\x66\xb2\x14\x58\x16\x12\x2e\x72\xa7\xa3\x39\x58\xd0\xbd\xe0\x8f\xb4\x09\xb6\xf5\xf1\xfe\xe1\x53\xf8\xe6\xf5\xc5\x3b\xcb\xed\x81\xef\xc3\x16\x05\x12\x81\x7b\xf4\xf5\xd3\x03\x0c\x2e\xdf\xbf\x39\x80\x54\xcb\x9b\x51\xb9\x83\xba\x9b\xaa\x81\xe3\x6a\x10\x0e\x0f\x65\x4a\x05\xc3\x42\x0c\xb7\x54\x60\xb2\x70\x01\x3b\xdb\x0e\x9a\x19\x03\x23\x5f\x8e\xc5\xec\xb6\x51\x3b\x60\xb5\x23\x0b\x4e\xc5\xbc\x45\xea\x06\x78\x8a\xd0\x7f\x79\x37\xd4\xe3\x14\xc7\xef\x2f\x86\x7b\x7a\xa9\x0d\x82\xc6\x40\x2a\x8b\x14\xfe\x0c\x0e\x8a\x7d\x98\xba\x1d\x5b\xd4\x3a\x68\xd3\x87\xd7\x2e\x1a\xf5\x07\xfb\xea\x0c\xd5\x81\xf7\x16\x35\x38\xbb\x51\xef\xe9\x55\xf1\x3e\x5c\xe8\x03\x4a\xd1\x5d\x4f\xa6\x1d\x6f\x3c\x49\xf0\x44\x1e\x4e\xb8\x67\x4b\x9a\x39\x59\x0f\xa4\x31\x61\x73\x14\xf7\x4d\x3f\xa3\xd4\xb1\xdb\xaa\x21\x69\x25\xbd\xef\x45\x2d\xbd\x9c\xfa\x4d\xb4\x58\x4e\x66\xd4\x2b\x8b\xd9\x2f\x34\x27\x2c\x1b\x3f\x3d\x81\x1e\xc0\x7a\x6d\xf7\x34\xdf\x5e\x4b\xc3\x70\x75\xa4\x26\x74\x4f\xac\xc2\x76\x9a\xd4\xee\x69\x6a\x7b\x9b\xa6\xf7\x49\x6d\x5c\x6b\xd8\x01\xdc\x4f\x8f\xd2\x43\xef\x57\xa8\xa6\x02\xb6\x90\xaa\x9e\x18\x90\x68\xf1\x59\x19\xcc\x49\xe6\xd8\x4d\x77\xba\x26\x92\x38\x2e\x2e\x02\xfb\x6c\x10\x18\xb6\xa6\xda\x70\xf4\xca\x59\x60\xe7\xe1\x0b\xd7\x9b\xe2\x5f\xc7\x16\x54\xad\x1e\xe7\x1b\x75\x4a\xf5\xbb\x6f\xba\xe6\xe2\x54\xe3\xf0\xaf\x77\x40\x1b\xeb\x3d\x37\x46\xd1\x7a\xa5\x0e\xd1\xdf\x1f\xee\x7e\x73\x6c\x8c\x75\x8d\xc5\x08\x43\x8d\xd5\x9a\x17\xa6\x2b\x9c\x4a\x5c\xb3\xd2\x2d\x04\x6b\xc1\xb4\x6a\x78\xa4\x02\xad\x0f\x28\x74\x26\x19\x2c\x58\xa2\x45\x9e\xa2\x08\xe3\x31\x60\x6b\xa6\x09\x2b\x68\xec\xee\xd5\x57\x41\x65\x2d\x0a\xc3\x99\x11\x2d\xdb\xbc\x09\xd8\xae\xa7\x6e\x3b\x8e\x6d\x1b\xd4\x0e\x6d\x48\x89\x39\x82\xb1\xc5\xfb\x99\xe0\xc5\x6c\xf2\x80\x4d\x36\x0e\x55\x23\xd5\x9f\x60\xc3\x39\xec\x78\x9d\xe3\xf7\xef\x5f\xae\x46\x53\xe1\x4f\x4c\x5c\x24\x7f\x4b\x64\xea\xe9\x1b\x45\xb3\x8e\xaa\xa4\x8a\xfb\x04\x82\xfd\x05\xfc\x9c\xc2\x27\x5a\x45\xa9\xda\x79\x36\xfb\x4e\x99\x3c\x4a\x86\x55\x25\x6e\xfa\x37\xed\x44\xb1\x3a\x60\xb4\x3e\x08\x2c\x4e\x88\x28\xbc\x3c\x19\xd9\x9f\x13\xdb\x5c\x9a\x8f\x31\x6a\xd0\x9f\x67\xf2\x9c\x87\x92\x14\xa0\x2f\x2f\x63\x6b\x77\xa9\xbc\xec\x5c\xfb\x0a\xec\x09\x24\x1b\x5a\x93\x0f\xd3\x44\x60\x95\x08\x77\xfe\x0b\xbe\xd8\xee\x8e\xaf\xd0\x26\xcf\xef\x7b\x95\xf2\xc5\xde\x61\xdb\x84\xa9\x09\xe9\x44\x9d\xd1\xfd\xf8\x6c\xee\x0b\x17\xc7\x96\x46\xb3\x8a\x1e\x40\xbc\x3d\x81\xf0\xe6\x24\xc2\x31\xeb\x77\xa6\xf5\xff\xd4\xa7\x35\x19\x34\x9a\x31\x59\xc7\x58\x35\x9b\x6f\xdc\x42\xf5\xf9\x07\x6b\xde\x3b\xd8\xa6\x92\x0b\x9a\xf3\x39\x3d\x59\xcc\x4d\x16\x3f\xaf\xe5\xff\x87\xee\xb2\xb1\x35\xcb\xf9\xc9\x2a\x6a\x18\x19\x29\xa3\x52\x42\x37\x4f\xbc\x95\x22\xc5\x57\x5d\x2f\x9e\xa2\xe5\x69\x8b\x6b\x36\xef\x34\xf6\x8a\x66\x89\x9e\xd4\x39\x28\x9d\xdb\x04\xbe\xa4\xd4\x7d\x63\xe3\xc6\x6b\x1a\xb1\xe3\x7a\x5a\x73\x0e\x3b\x05\xbe\xbc\xc4\x57\xf5\xc2\x54\x3b\x0a\x17\x2e\x5e\x50\x1c\xe5\xe4\x50\xd3\xb9\xcf\x70\x75\xdf\x3e\x74\xa0\xe4\x7d\xd8\x21\xfc\xaa\x4b\x82\xa3\x70\x2f\x82\xfd\x73\xac\x4c\x47\xdd\xba\xfb\x1c\x6e\x97\xf7\x16\xfb\x5c\x63\x6f\x20\xd6\x07\x5e\xce\x8f\x11\x9a\x18\x8d\x3b\x6d\x85\xc7\xb8\x0c\x0c\x68\xd8\x84\x76\x70\xdc\x9f\x76\x43\x0a\xa4\x29\xa9\x63\x42\xd9\x88\x65\x43\x08\x0d\x1b\xbb\x5c\xda\xe6\x3b\xc2\x56\xa8\x4a\xdd\x6e\x8f\xd2\xef\xe0\x7b\xb8\xba\xa0\x9b\x66\xe6\x0b\x6d\xe4\x6f\x7e\x3b\x19\xa9\x9f\x0f\xda\x47\x9b\x4a\x2f\x16\x8f\x2d\x23\x4f\x2c\xec\x0d\x44\xbd\x9f\x41\xf5\x76\xcf\xf3\x46\x3e\x5a\x75\xec\xdb\xf7\xd2\x64\xab\x1b\xf9\x0d\x2a\xba\xd1\xbf\xd5\xfc\x27\x00\x00\xff\xff\xe2\xcf\xfa\x1f\xe6\x11\x00\x00")

func assetsMapHtmlBytes() ([]byte, error) {
	return bindataRead(
		_assetsMapHtml,
		"assets/map.html",
	)
}

func assetsMapHtml() (*asset, error) {
	bytes, err := assetsMapHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/map.html", size: 4582, mode: os.FileMode(420), modTime: time.Unix(1439033630, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if (err != nil) {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"assets/map.html": assetsMapHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"assets": &bintree{nil, map[string]*bintree{
		"map.html": &bintree{assetsMapHtml, map[string]*bintree{
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
        data, err := Asset(name)
        if err != nil {
                return err
        }
        info, err := AssetInfo(name)
        if err != nil {
                return err
        }
        err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
        if err != nil {
                return err
        }
        err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
        if err != nil {
                return err
        }
        err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
        if err != nil {
                return err
        }
        return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
        children, err := AssetDir(name)
        // File
        if err != nil {
                return RestoreAsset(dir, name)
        }
        // Dir
        for _, child := range children {
                err = RestoreAssets(dir, filepath.Join(name, child))
                if err != nil {
                        return err
                }
        }
        return nil
}

func _filePath(dir, name string) string {
        cannonicalName := strings.Replace(name, "\\", "/", -1)
        return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

