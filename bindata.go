// Code generated by go-bindata.
// sources:
// assets/map.html
// DO NOT EDIT!

package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"strings"
	"os"
	"time"
	"io/ioutil"
	"path/filepath"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name string
	size int64
	mode os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _assetsMapHtml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xdc\x58\x5b\x73\xdb\xba\x11\x7e\xcf\xaf\xd8\xd0\xe9\x90\xac\x25\x92\x72\x2e\xb5\xa9\xcb\xe9\xa9\x9d\x39\x27\x1d\xfb\xd8\x53\xa7\x93\xe9\x74\x3a\x19\x88\x04\x45\x38\x24\xc1\x82\xa0\x2e\xf1\xe8\xbf\x77\x01\x52\x12\x44\x49\x4e\xfb\xd2\x87\xf3\x90\x18\xdc\x5d\x7c\xfb\x61\xb1\xbb\x00\x34\x7a\x7d\x73\x7f\xfd\xf9\x1f\x0f\x1f\x21\x95\x79\x06\x0f\x7f\xff\xcb\xed\xa7\x6b\xb0\xfa\xbe\xff\xe5\xed\xb5\xef\xdf\x7c\xbe\x81\x5f\x3f\xdf\xdd\xc2\x3b\x2f\x18\xf8\xfe\xc7\xdf\xac\xc9\xab\x91\xb2\x9c\xbc\x02\x18\xa5\x94\xc4\x6a\x80\x43\xc9\x64\x46\x27\x77\x2b\xb8\xe5\x11\x91\x8c\x17\x23\xbf\x11\x35\xea\x9c\x4a\x02\x05\xc9\xe9\xd8\x9a\x33\xba\x28\xb9\x90\x16\x44\xbc\x90\xb4\x90\x63\x6b\xc1\x62\x99\x8e\x63\x3a\x67\x11\xed\xeb\x8f\x1e\xb0\x82\x49\x46\xb2\x7e\x15\x91\x8c\x8e\x07\x3d\xc8\xc9\x92\xe5\x75\xbe\x11\x58\xe0\xb7\xd8\x95\x5c\x65\x14\xe4\xaa\x44\x70\x49\x97\xd2\x8f\xaa\xca\x82\x9c\xc6\x8c\x8c\xad\x2a\x12\x94\x16\x56\x63\x0a\xf0\x67\x96\x2b\xdf\x50\x8b\xcc\x49\xa5\x2c\xab\xd0\xf7\x13\xa4\x51\x79\x33\xce\x67\x19\x25\x25\xab\xbc\x88\xe7\x0a\xe3\xa7\x84\xe4\x2c\x5b\x8d\x6f\x04\x67\xf1\xf9\x23\x29\xaa\x50\xd0\x59\x9d\x11\xd1\x9b\xf2\x2c\x76\x87\x2d\xe6\x94\xc7\xab\x9e\x8a\x49\xef\x2c\x27\x65\xcc\xe6\xcf\x7a\x09\xe1\x20\x08\xfe\x30\x4c\x29\x9b\xa5\xb2\x19\x97\x24\x8e\x59\x31\x0b\x83\x61\x4e\xc4\x8c\x15\x38\x50\xbe\xfb\x8d\x9f\xd0\xd6\x8e\x40\x39\xb2\x1b\x45\xc5\xbe\xd3\x70\x70\x51\x2e\x87\xeb\xd6\x97\xc7\xb3\x6b\xd4\x08\x9e\xfd\x2c\xa5\x60\xd3\x5a\x85\xfa\x79\xca\xa5\xe4\x79\xf8\xb6\x5c\xc2\xeb\x66\x81\xa4\x90\xc3\x29\x89\xbe\xcd\x04\xaf\x8b\x38\x3c\x4b\x92\x64\xc8\x4b\x12\x31\xb9\x0a\x03\xef\xf2\xfd\x96\x8b\x02\xd7\xbe\x16\x0d\x51\xb5\xb2\xad\xb7\xb3\x8c\x54\xb2\x2e\x63\x22\x69\xfc\x0c\x25\xaf\x98\x72\x17\x92\x69\xc5\xb3\x5a\xd2\x21\x64\x34\x91\xca\xed\x10\x24\x2f\x9b\x41\xd7\x2b\x6c\x3c\x0d\x02\xa5\xde\x91\xb8\x1a\xc2\xf7\x3e\x2b\x62\xba\x0c\xaf\xae\xf0\x63\xca\x45\x4c\x45\x5f\x90\x98\xd5\x55\x6b\xdd\x0a\xc3\x01\xae\x0c\x7d\x62\x74\xce\x5a\xdb\x65\xbf\x4a\x49\xcc\x17\xa1\x96\x00\x5a\xeb\x7f\xcd\xb4\x17\xa3\x05\xe4\x39\xe2\x19\x17\xe1\x59\x10\x5c\x99\xf1\x02\x95\x3c\xfd\x98\x46\x5c\xe8\x0c\x0e\x0b\x5e\xd0\x36\x16\x23\x5f\x67\xd9\x26\xe3\x22\xc1\x4a\x09\x95\x88\xc6\xd6\x26\x8b\xc8\x13\x59\x76\x93\x48\xc9\xfc\x8c\x4d\x2b\xff\xe9\xdf\x35\x15\x2b\x7f\xe0\x7d\x68\x87\x5e\xce\x0a\xef\xa9\xb2\x26\x88\xac\xd1\x4e\x40\x23\xf2\x62\xb1\xf0\x78\x49\x8b\x8c\xac\xa8\xa8\x3c\x2e\x66\x3e\x7a\xf0\xef\x51\x74\xdb\x88\x4e\xe3\x18\x55\xf1\x44\xe6\xa4\x91\x62\xe5\xa5\x44\x54\x14\x2b\xaf\x96\x49\xff\x72\x5b\x1d\x51\x2d\x04\x16\x64\xd6\x96\x30\x8c\xa1\xa8\xb3\x6c\x93\xe7\x2c\x3a\x10\x61\x1e\x7f\x43\x02\x1d\xe9\x77\xce\x73\x14\x0d\x86\xaf\x5a\xc1\x1b\x27\xa9\x8b\x48\x41\x3a\xee\x73\x2b\x53\x93\x4b\x35\x91\x2e\xc0\x58\xca\x1d\x29\x1d\xab\x29\x23\xab\x07\x3b\x63\xd0\xdd\x02\x77\xb2\x0a\xe1\x9f\x86\x14\xba\x00\xed\x86\x7b\x3f\x8b\xd9\x83\x5a\xa4\x70\xdc\xde\x7f\x65\xbf\xcb\x10\xc7\x35\x26\xfc\x6b\x3b\x5e\x6f\x2b\x5e\x73\xf7\x30\xaf\x35\x86\xd3\x41\xd4\x7f\xbc\xfb\xc7\x3b\xc7\x75\xb7\x21\x00\x98\x13\x01\x19\x47\x23\x79\xb8\xea\x5b\x2d\x77\x20\xf0\x82\x9e\xfa\x0f\xdc\x3d\xca\x98\xc9\x52\x60\x5b\x48\xb8\xc8\x9d\x8e\xe6\x60\x41\x0f\x82\x3f\xd1\x26\xd8\xd6\xc7\x87\xc7\x5f\xc2\x77\x6f\x2f\x3e\x58\x6e\x0f\x7c\x1f\xb6\x28\x90\x08\xdc\xa3\x2f\xbf\x3c\xc2\xe0\xea\xf2\xdd\x01\xa4\x5a\xde\x8c\xca\x1d\xd4\xfd\x54\x0d\x1c\x57\x83\x70\x78\x2c\x53\x2a\x18\x36\x62\xb8\xa3\x02\x93\x85\x0b\xd8\xd9\x76\xd0\xcc\x18\x18\xf9\x72\x2c\x66\x77\x8d\xda\x01\xab\x1d\x59\x70\x2a\xe6\x2d\x52\x37\xc0\x53\x84\xfe\xd3\x87\xa1\x1e\xa7\x38\xbe\xbc\x18\xee\xe9\xa5\x36\x08\x1a\x03\xa9\x2c\x52\xf8\x23\x38\x28\xf6\x61\xea\x76\x6c\x51\xeb\xa0\x4d\x1f\xde\xba\x68\xd4\x1f\xec\xab\x33\x54\x07\xde\x7b\xd4\xe0\xec\x46\xbd\xa7\x57\xcd\xfb\x70\xa1\x8f\x28\x45\x77\x3d\x99\x76\xbc\xf1\x24\xc1\x8a\x3c\x9c\xf0\xc0\x96\x34\x73\xb2\x1e\x48\x63\xc2\xa6\x14\xf7\x4d\x3f\xa1\xd4\xb1\xdb\xae\x21\x69\x25\xbd\x6f\x45\x2d\xbd\x9c\xfa\x4d\xb4\x58\x4e\x66\xd4\x2b\x8b\xd9\x4f\x34\x27\x2c\x1b\x3f\x3f\x83\x1e\xc0\x7a\x6d\xf7\x34\xdf\x5e\x4b\xc3\x70\x75\xa4\x27\x74\x2b\x56\x61\x3b\x4d\x6a\xf7\x34\xb5\xbd\x4d\xd3\xfb\xa4\x36\xae\x35\xec\x00\xee\xa7\x47\xe9\xa1\xf7\x6b\x54\x53\x01\x5b\x48\xd5\x4f\x0c\x48\xb4\xf8\xa4\x0c\xe6\x24\x73\xec\xe6\x74\xba\x21\x92\x38\x2e\x2e\x02\xcf\xd9\x20\x30\x6c\x4d\xb5\xe1\xe8\x8d\xb3\xc0\x93\x87\x2f\x5c\x6f\x8a\x7f\x1d\x5b\x50\xb5\x7a\x9c\x6f\xf4\x29\x75\xde\x7d\xd5\x3d\x17\xa7\x1a\xc5\xbf\xde\x01\x6d\xac\xf7\xdc\x18\x4d\xeb\x8d\x2a\xa2\xbf\x3e\xde\xff\xe6\xd8\x18\xeb\x1a\x9b\x11\x86\x1a\xbb\x35\x2f\x4c\x57\x38\x95\xb8\x66\xa7\x5b\x08\xd6\x82\x69\xd5\xf0\x48\x07\x5a\x1f\x50\xe8\x4c\x32\x58\xb0\x44\x8b\x3c\x45\x11\xc6\x63\xc0\xa3\x99\x26\xac\xa0\xb1\xbb\xd7\x5f\x05\x95\xb5\x28\x0c\x67\x46\xb4\x6c\xf3\x26\x60\xbb\x9e\xba\xed\x38\xb6\x6d\x50\x3b\xb4\x21\x25\xe6\x08\xc6\x16\xef\x67\x82\x17\xb3\x89\xe2\xd6\xb4\x1d\x75\x98\x6a\x11\xd8\x70\x0e\x3b\x6e\xe7\x60\x8f\xa6\xc2\x9f\x98\xb8\x48\xfe\x8e\xc8\xd4\xd3\x37\x8a\x66\x1d\x55\x49\x15\xf7\x09\x04\xfb\x0b\xf8\x31\x85\x47\x35\x33\x3c\xe6\x9e\x55\x25\x6e\xf5\x57\x0d\x7d\x94\xc7\xfa\x20\x9c\x38\x21\xa2\xf0\xfa\x64\x3c\x7f\x4c\x67\x73\x55\x3e\xc6\xa8\x41\x7f\x99\xc9\x4b\x1e\x4a\x52\x80\xbe\xb2\x8c\xad\xdd\x55\xf2\xaa\x73\xd9\x2b\xf0\x24\x20\xd9\xd0\x9a\xfc\x8d\x26\x58\x02\x29\xae\x1d\x4f\xa7\x2d\x87\x82\x2f\x34\x03\x5f\xa1\x4d\x5e\xde\xed\x2a\xe5\x8b\xbd\x12\xdb\x84\xa9\x09\xe9\x44\x55\xe6\x7e\x7c\x36\xb7\x84\x8b\x63\x4b\xa3\x59\x45\x0f\x20\xde\x9f\x40\x78\x77\x12\xe1\x98\xf5\x07\xd3\xfa\x7f\x3a\x9d\x35\x19\x34\x9a\x31\x59\xc7\xd8\x2b\x9b\x6f\xdc\x42\xf5\xf9\x3b\x3b\xb2\x77\xb0\x4d\xff\x16\x34\xe7\x73\x7a\xb2\x85\x9b\x2c\x7e\xdc\xc1\xff\x0f\x67\xca\xc6\xd6\x6c\xe2\x27\x7b\xa7\x61\x64\xa4\x8c\x4a\x09\x7d\x64\xe2\x5d\x14\x29\xbe\xe9\x7a\xf1\x14\x2d\x4f\x5b\xdc\xb0\x79\xe7\x38\xaf\x68\x96\xe8\x49\x9d\x42\xe9\xdc\x21\xf0\xfd\xa4\x6e\x19\x1b\x37\x5e\x73\xfc\x3a\xae\xa7\x35\xe7\xb0\x53\xe0\x7b\x4b\x7c\x51\xef\x4a\xb5\xa3\x70\xe1\xe2\xb5\xc4\x51\x4e\x0e\x35\x9d\x5b\x0c\x57\xb7\xec\x43\x07\x4a\xde\x87\x1d\xc2\xaf\xba\x25\x38\x0a\xf7\x22\xd8\xaf\x63\x65\x3a\xea\x76\xdb\x97\x70\xbb\xbc\xb7\xd8\xe7\x1a\x7b\x03\xb1\x3e\xf0\x72\x7e\x8c\xd0\xc4\x38\xae\xd3\x56\x78\x8c\xcb\xc0\x80\x86\x4d\x68\x07\xc7\xfd\x69\x37\xa4\x40\x9a\x92\x3a\x26\x94\x8d\x58\x36\x84\xd0\xb0\xb1\xcb\xa5\x6d\xbe\x1e\x6c\x85\xaa\xd4\xed\xf6\x28\xfd\x0e\xbe\x87\xab\x0b\xba\x69\x66\xbe\xcb\x46\xfe\xe6\x17\x93\x91\xfa\xd1\xa0\x7d\xaa\xa9\xf4\x62\xf1\xd8\x32\xf2\xc4\xc2\xb3\x81\xa8\x57\x33\xa8\x53\xd3\xf3\xbc\x91\x8f\x56\x1d\xfb\xf6\x95\x34\xd9\xea\x46\x7e\x83\x8a\x6e\xf4\x2f\x34\xff\x09\x00\x00\xff\xff\x3e\x46\xda\x27\xdc\x11\x00\x00")

func assetsMapHtmlBytes() ([]byte, error) {
	return bindataRead(
		_assetsMapHtml,
		"assets/map.html",
	)
}

func assetsMapHtml() (*asset, error) {
	bytes, err := assetsMapHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/map.html", size: 4572, mode: os.FileMode(420), modTime: time.Unix(1439034755, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if (err != nil) {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"assets/map.html": assetsMapHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"assets": &bintree{nil, map[string]*bintree{
		"map.html": &bintree{assetsMapHtml, map[string]*bintree{
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
        data, err := Asset(name)
        if err != nil {
                return err
        }
        info, err := AssetInfo(name)
        if err != nil {
                return err
        }
        err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
        if err != nil {
                return err
        }
        err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
        if err != nil {
                return err
        }
        err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
        if err != nil {
                return err
        }
        return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
        children, err := AssetDir(name)
        // File
        if err != nil {
                return RestoreAsset(dir, name)
        }
        // Dir
        for _, child := range children {
                err = RestoreAssets(dir, filepath.Join(name, child))
                if err != nil {
                        return err
                }
        }
        return nil
}

func _filePath(dir, name string) string {
        cannonicalName := strings.Replace(name, "\\", "/", -1)
        return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

