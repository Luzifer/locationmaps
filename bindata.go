// Code generated by go-bindata.
// sources:
// assets/map.html
// DO NOT EDIT!

package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"strings"
	"os"
	"time"
	"io/ioutil"
	"path/filepath"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name string
	size int64
	mode os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _assetsMapHtml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xdc\x58\x5b\x73\xdb\xba\x11\x7e\xcf\xaf\xd8\xd0\xe9\x90\xac\x25\x92\x72\x2e\x8d\xa9\xcb\x69\x6a\x67\x72\xd2\xb1\x8f\x3d\xe3\x9c\xc9\x74\x3a\x9d\x0c\x44\x82\x22\x1c\x92\x60\x41\x50\x97\x78\xf4\xdf\xbb\x00\x29\x09\xa2\xa4\xb8\x7d\xe9\xc3\x79\x48\x0c\xee\x2e\xbe\xfd\xb0\xd8\x5d\x00\x1a\xbd\xbc\xbe\xbb\xfa\xf2\x8f\xfb\x8f\x90\xca\x3c\x83\xfb\xdf\xff\x76\xf3\xf9\x0a\xac\xbe\xef\x7f\x7d\x7d\xe5\xfb\xd7\x5f\xae\xe1\xd7\x2f\xb7\x37\xf0\xc6\x0b\x06\xbe\xff\xf1\x37\x6b\xf2\x62\xa4\x2c\x27\x2f\x00\x46\x29\x25\xb1\x1a\xe0\x50\x32\x99\xd1\xc9\xed\x0a\x6e\x78\x44\x24\xe3\xc5\xc8\x6f\x44\x8d\x3a\xa7\x92\x40\x41\x72\x3a\xb6\xe6\x8c\x2e\x4a\x2e\xa4\x05\x11\x2f\x24\x2d\xe4\xd8\x5a\xb0\x58\xa6\xe3\x98\xce\x59\x44\xfb\xfa\xa3\x07\xac\x60\x92\x91\xac\x5f\x45\x24\xa3\xe3\x41\x0f\x72\xb2\x64\x79\x9d\x6f\x04\x16\xf8\x2d\x76\x25\x57\x19\x05\xb9\x2a\x11\x5c\xd2\xa5\xf4\xa3\xaa\xb2\x20\xa7\x31\x23\x63\xab\x8a\x04\xa5\x85\xd5\x98\x02\xfc\x95\xe5\xca\x37\xd4\x22\x73\x52\x29\xcb\x2a\xf4\xfd\x04\x69\x54\xde\x8c\xf3\x59\x46\x49\xc9\x2a\x2f\xe2\xb9\xc2\xf8\x25\x21\x39\xcb\x56\xe3\x6b\xc1\x59\x7c\xfe\x40\x8a\x2a\x14\x74\x56\x67\x44\xf4\xa6\x3c\x8b\xdd\x61\x8b\x39\xe5\xf1\xaa\xa7\x62\xd2\x3b\xcb\x49\x19\xb3\xf9\x93\x5e\x42\x38\x08\x82\x3f\x0d\x53\xca\x66\xa9\x6c\xc6\x25\x89\x63\x56\xcc\xc2\x60\x98\x13\x31\x63\x05\x0e\x94\xef\x7e\xe3\x27\xb4\xb5\x23\x50\x8e\xec\x46\x51\xb1\x1f\x34\x1c\x5c\x94\xcb\xe1\xba\xf5\xe5\xf1\xec\x0a\x35\x82\x67\x1f\xa4\x14\x6c\x5a\xab\x50\x3f\x4d\xb9\x94\x3c\x0f\x5f\x97\x4b\x78\xd9\x2c\x90\x14\x72\x38\x25\xd1\xf7\x99\xe0\x75\x11\x87\x67\x49\x92\x0c\x79\x49\x22\x26\x57\x61\xe0\xbd\x7f\xbb\xe5\xa2\xc0\xb5\xaf\x45\x43\x54\xad\x6c\xeb\xed\x2c\x23\x95\xac\xcb\x98\x48\x1a\x3f\x41\xc9\x2b\xa6\xdc\x85\x64\x5a\xf1\xac\x96\x74\x08\x19\x4d\xa4\x72\x3b\x04\xc9\xcb\x66\xd0\xf5\x0a\x1b\x4f\x83\x40\xa9\x77\x24\x2e\x87\xf0\xa3\xcf\x8a\x98\x2e\xc3\xcb\x4b\xfc\x98\x72\x11\x53\xd1\x17\x24\x66\x75\xd5\x5a\xb7\xc2\x70\x80\x2b\x43\x9f\x18\x9d\xb3\xd6\x76\xd9\xaf\x52\x12\xf3\x45\xa8\x25\x80\xd6\xfa\x5f\x33\xed\xa7\xd1\x02\xf2\x14\xf1\x8c\x8b\xf0\x2c\x08\x2e\xcd\x78\x81\x4a\x9e\x7e\x4c\x23\x2e\x74\x06\x87\x05\x2f\x68\x1b\x8b\x91\xaf\xb3\x6c\x93\x71\x91\x60\xa5\x84\x4a\x44\x63\x6b\x93\x45\xe4\x91\x2c\xbb\x49\xa4\x64\x7e\xc6\xa6\x95\xff\xf8\xef\x9a\x8a\x95\x3f\xf0\xde\xb5\x43\x2f\x67\x85\xf7\x58\x59\x13\x44\xd6\x68\x27\xa0\x11\x79\xb1\x58\x78\xbc\xa4\x45\x46\x56\x54\x54\x1e\x17\x33\x1f\x3d\xf8\x77\x28\xba\x69\x44\xa7\x71\x8c\xaa\x78\x24\x73\xd2\x48\xb1\xf2\x52\x22\x2a\x8a\x95\x57\xcb\xa4\xff\x7e\x5b\x1d\x51\x2d\x04\x16\x64\xd6\x96\x30\x8c\xa1\xa8\xb3\x6c\x93\xe7\x2c\x3a\x10\x61\x1e\x7f\x47\x02\x1d\xe9\x0f\xce\x73\x14\x0d\x86\x2f\x5a\xc1\x2b\x27\xa9\x8b\x48\x41\x3a\xee\x53\x2b\x53\x93\x4b\x35\x91\x2e\xc0\x58\xca\x2d\x29\x1d\xab\x29\x23\xab\x07\x3b\x63\xd0\xdd\x02\x77\xb2\x0a\xe1\x9f\x86\x14\xba\x00\xed\x86\x7b\x1f\xc4\xec\x5e\x2d\x52\x38\x6e\xef\xbf\xb2\xdf\x65\x88\xe3\x1a\x13\xfe\xb5\x1d\xaf\xb7\x15\xaf\xb9\x7b\x98\xd7\x1a\xc3\xe9\x20\xea\x3f\xde\xdd\xc3\xad\xe3\xba\xdb\x10\x00\xcc\x89\x80\x8c\xa3\x91\x3c\x5c\xf5\x8d\x96\x3b\x10\x78\x41\x4f\xfd\x07\xee\x1e\x65\xcc\x64\x29\xb0\x2d\x24\x5c\xe4\x4e\x47\x73\xb0\xa0\x7b\xc1\x1f\x69\x13\x6c\xeb\xe3\xfd\xc3\xa7\xf0\xcd\xeb\x8b\x77\x96\xdb\x03\xdf\x87\x2d\x0a\x24\x02\xf7\xe8\xeb\xa7\x07\x18\x5c\xbe\x7f\x73\x00\xa9\x96\x37\xa3\x72\x07\x75\x37\x55\x03\xc7\xd5\x20\x1c\x1e\xca\x94\x0a\x86\x8d\x18\x6e\xa9\xc0\x64\xe1\x02\x76\xb6\x1d\x34\x33\x06\x46\xbe\x1c\x8b\xd9\x6d\xa3\x76\xc0\x6a\x47\x16\x9c\x8a\x79\x8b\xd4\x0d\xf0\x14\xa1\xff\xf2\x6e\xa8\xc7\x29\x8e\xdf\x5f\x0c\xf7\xf4\x52\x1b\x04\x8d\x81\x54\x16\x29\xfc\x19\x1c\x14\xfb\x30\x75\x3b\xb6\xa8\x75\xd0\xa6\x0f\xaf\x5d\x34\xea\x0f\xf6\xd5\x19\xaa\x03\xef\x2d\x6a\x70\x76\xa3\xde\xd3\xab\xe6\x7d\xb8\xd0\x07\x94\xa2\xbb\x9e\x4c\x3b\xde\x78\x92\x60\x45\x1e\x4e\xb8\x67\x4b\x9a\x39\x59\x0f\xa4\x31\x61\x53\x8a\xfb\xa6\x9f\x51\xea\xd8\x6d\xd7\x90\xb4\x92\xde\xf7\xa2\x96\x5e\x4e\xfd\x26\x5a\x2c\x27\x33\xea\x95\xc5\xec\x17\x9a\x13\x96\x8d\x9f\x9e\x40\x0f\x60\xbd\xb6\x7b\x9a\x6f\xaf\xa5\x61\xb8\x3a\xd2\x13\xba\x15\xab\xb0\x9d\x26\xb5\x7b\x9a\xda\xde\xa6\xe9\x7d\x52\x1b\xd7\x1a\x76\x00\xf7\xd3\xa3\xf4\xd0\xfb\x15\xaa\xa9\x80\x2d\xa4\xea\x27\x06\x24\x5a\x7c\x56\x06\x73\x92\x39\x76\x73\x3a\x5d\x13\x49\x1c\x17\x17\x81\xe7\x6c\x10\x18\xb6\xa6\xda\x70\xf4\xca\x59\xe0\xc9\xc3\x17\xae\x37\xc5\xbf\x8e\x2d\xa8\x5a\x3d\xce\x37\xfa\x94\x3a\xef\xbe\xe9\x9e\x8b\x53\x8d\xe2\x5f\xef\x80\x36\xd6\x7b\x6e\x8c\xa6\xf5\x4a\x15\xd1\xdf\x1f\xee\x7e\x73\x6c\x8c\x75\x8d\xcd\x08\x43\x8d\xdd\x9a\x17\xa6\x2b\x9c\x4a\x5c\xb3\xd3\x2d\x04\x6b\xc1\xb4\x6a\x78\xa4\x03\xad\x0f\x28\x74\x26\x19\x2c\x58\xa2\x45\x9e\xa2\x08\xe3\x31\xe0\xd1\x4c\x13\x56\xd0\xd8\xdd\xeb\xaf\x82\xca\x5a\x14\x86\x33\x23\x5a\xb6\x79\x13\xb0\x5d\x4f\xdd\x76\x1c\xdb\x36\xa8\x1d\xda\x90\x12\x73\x04\x63\x8b\xf7\x33\xc1\x8b\xd9\xe4\x01\x0f\xd9\x38\x54\x07\xa9\xfe\x04\x1b\xce\x61\xc7\xeb\x1c\xbf\x7f\xff\x72\x35\x9a\x0a\x7f\x62\xe2\x22\xf9\x5b\x22\x53\x4f\xdf\x28\x9a\x75\x54\x25\x55\xdc\x27\x10\xec\x2f\xe0\x79\x0a\x9f\x68\x15\xa5\x6a\xe7\xd9\xec\x3b\x65\xf2\x28\x19\x56\x95\xb8\xe9\xdf\xb4\x13\xc5\xea\x80\xd1\xfa\x20\xb0\x38\x21\xa2\xf0\xf2\x64\x64\x9f\x27\xb6\xb9\x34\x1f\x63\xa4\xd1\x3d\xd5\xb4\x89\xc4\xd9\xdf\xb0\x92\x30\x5d\xab\x67\xb8\xfd\xcc\x67\x49\x0a\xd0\xd7\x99\xb1\xb5\xbb\x66\x5e\x76\x2e\x82\x85\x72\x98\x0d\xad\xc9\x87\x69\x22\xb0\x6f\x84\x3b\x46\x05\x5f\x6c\xf7\xcb\x57\x68\x93\x9f\x67\x42\x95\xf2\xc5\x5e\xf9\x6d\x02\xd7\x04\x79\xa2\xaa\x76\x3f\x62\x9b\x1b\xc4\xc5\xb1\xa5\xd1\xac\xa2\x07\x10\x6f\x4f\x20\xbc\x39\x89\x70\xcc\xfa\x9d\x69\xfd\x3f\x9d\xdc\x9a\x0c\x1a\xcd\x98\xac\x63\xec\xa3\xcd\x37\x6e\xaa\xfa\xfc\x83\x1d\xe7\x3b\xd8\xa6\xb7\x0b\x9a\xf3\x39\x3d\xd9\xde\x4d\x16\xcf\x77\xf7\xff\xc3\x79\xb3\xb1\x35\x1b\xfc\xc9\xbe\x6a\x18\x19\x29\xa3\x52\x42\x1f\xa7\x78\x4f\x45\x8a\xaf\xba\x5e\x3c\x45\xcb\xd3\x16\xd7\x6c\xde\x39\xea\x2b\x9a\x25\x7a\x52\xa7\x50\x3a\xf7\x0b\x7c\x5b\xa9\x1b\xc8\xc6\x8d\xd7\x1c\xcd\x8e\xeb\x69\xcd\x39\xec\x14\xf8\x16\x13\x5f\xd5\x9b\x53\xed\x28\x5c\xb8\x78\x65\x71\x94\x93\x43\x4d\xe7\x86\xc3\xd5\x0d\xfc\xd0\x81\x92\xf7\x61\x87\xf0\xab\x6e\x09\x8e\xc2\xbd\x08\xf6\xeb\x58\x99\x8e\xba\x9d\xf8\x67\xb8\x5d\xde\x5b\xec\x73\x8d\xbd\x81\x58\x1f\x78\x39\x3f\x46\x68\x62\x1c\xe5\x69\x2b\x3c\xc6\x65\x60\x40\xc3\x26\xb4\x83\xe3\xfe\xb4\x1b\x52\x20\x4d\x49\x1d\x13\xca\x46\x2c\x1b\x42\x68\xd8\xd8\xe5\xd2\x36\x5f\x16\xb6\x42\x55\xea\x76\x7b\x94\x7e\x07\xdf\xc3\xd5\x05\xdd\x34\x33\xdf\x6c\x23\x7f\xf3\x6b\xca\x48\xfd\xa0\xd0\x3e\xe3\x54\x7a\xb1\x78\x6c\x19\x79\x62\xe1\x69\x41\xd4\x8b\x1a\xd4\x69\xef\x79\xde\xc8\x47\xab\x8e\x7d\xfb\x82\x9a\x6c\x75\x23\xbf\x41\x45\x37\xfa\xd7\x9b\xff\x04\x00\x00\xff\xff\x2a\x41\x87\x67\xf8\x11\x00\x00")

func assetsMapHtmlBytes() ([]byte, error) {
	return bindataRead(
		_assetsMapHtml,
		"assets/map.html",
	)
}

func assetsMapHtml() (*asset, error) {
	bytes, err := assetsMapHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/map.html", size: 4600, mode: os.FileMode(420), modTime: time.Unix(1438986147, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if (err != nil) {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"assets/map.html": assetsMapHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"assets": &bintree{nil, map[string]*bintree{
		"map.html": &bintree{assetsMapHtml, map[string]*bintree{
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
        data, err := Asset(name)
        if err != nil {
                return err
        }
        info, err := AssetInfo(name)
        if err != nil {
                return err
        }
        err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
        if err != nil {
                return err
        }
        err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
        if err != nil {
                return err
        }
        err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
        if err != nil {
                return err
        }
        return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
        children, err := AssetDir(name)
        // File
        if err != nil {
                return RestoreAsset(dir, name)
        }
        // Dir
        for _, child := range children {
                err = RestoreAssets(dir, filepath.Join(name, child))
                if err != nil {
                        return err
                }
        }
        return nil
}

func _filePath(dir, name string) string {
        cannonicalName := strings.Replace(name, "\\", "/", -1)
        return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

